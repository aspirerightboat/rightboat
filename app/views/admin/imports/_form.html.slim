= semantic_form_for [:admin, @import] do |f|
  = f.inputs 'Import' do
    = f.input :user, as: :select, collection: User.companies, label_method: :name, value_method: :id, include_blank: false
    = f.input :import_type, collection: Rightboat::Imports::ImporterBase.import_types, include_blank: false
    = f.input :threads
    = f.input :use_proxy_for_images
    = f.input :active
  = f.inputs 'Parameters', id: 'import_params' do
    = f.semantic_errors :param

  = f.inputs 'Scheduling', id: 'import_scheduling' do
    span Every
    = f.input :frequency_unit, as: :select, collection: Import::FREQUENCY_UNITS, include_blank: false, label: false
    span(style="margin-left: 20px;") At:
    input(type="time" name="import[at]" value="#{f.object.at}")
    = f.time_zone_select :tz, nil
  = f.actions

- j_params = Rightboat::Imports::ImporterBase.import_types.inject({}) { |h, type| h[type] = Import.importer_class_by_type(type).params_validators; h }
/#import_params_data{data: {imports_params: j(j_params.to_json), current_params: j(resource.param.to_json)}}
/:javascript
/  $(function() {
/    window.imports_params = $.parseJSON($('#import_params_data').data('imports_params'));
/    window.current_params = $.parseJSON($('#import_params_data').data('current_params'));
/  }
javascript:
  window.imports_params = #{raw j_params.to_json};
  window.current_params = #{raw resource.param.to_json};

  // splitted to two declarations to fix rubymine highlighting
  $(function() {
    $('#import_import_type').change(function() {
      var $ol = $('#import_params ol').empty();
      var type = $(this).val();
      var params = window.imports_params[type];
      var any_params = !$.isEmptyObject(params);
      if (any_params) {
        $.each(params, function(key, validations) {
          var val = window.current_params[key] || '';
          var id = 'import_param_'+key;
          if (!(validations instanceof Array))
            validations = [validations];
          var required = validations[0] == 'presence' ? ' <span style="color:red">*</span>' : '';
          var hint = (validations[1] && validations[1][0] == '(') ? ' <i style="font-weight:normal">'+validations[1].replace('(?-mix:\\A', '').replace('\\z)', '')+'</i>' : '';
          $('<li class="string input required stringish">').appendTo($ol)
            .append('<label for="'+id+'" class="label">'+key + required + hint+'</label>')
            .append('<input type="text" name="import[param]['+key+']" id="'+id+'" value="'+val+'">');
        });
      }
      $('#import_params').toggle(any_params);
    }).change();
  });
