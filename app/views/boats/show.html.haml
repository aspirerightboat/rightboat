- @page_title = boat_title(@boat)
- @page_description = "#{@boat.manufacturer_model} for sale - #{truncate(strip_tags(@boat.short_description), length: 200, omission: '...')}"
- @canonical_url = sale_boat_url(manufacturer: @boat.manufacturer, model: @boat.model, boat: @boat)
- if @boat.primary_image
  - @image_url = @boat.primary_image.file_url

- content_for :meta_tags do
  %meta(property="og:type" content="product")
  %meta(itemprop="name" content="#{@boat.to_s}")
  %meta(itemprop="currency" content="#{@boat.currency.try(:name)}")
  %meta(itemprop="price" content="#{@boat.price}")
  %meta(name="robots" content="index, nofollow")

- content_for :header_text do
  - if session[:boats_count] && @back_url
    .navbar-h Boats <strong>For Sale</strong>
    %h3
      %strong= implicit_boats_count(session[:boats_count])
      %span.hidden-sm boats for sale

  - else
    .navbar-h
      %span.hidden-sm Find your
      %strong Rightboat

- content_for :header do
  - if @back_url
    = render 'shared/advanced_search'
  = render 'shared/navbar'

= render 'shared/search_bar'

.boat-view(data-boat-ref="#{@boat.slug}"
data-length="#{@boat.length_m.to_f}"
data-price="#{@boat.poa? ? nil : Currency.convert(@boat.price, @boat.currency, Currency.default)}")
  .container
    %h1= @page_title

  #slider.hide
    - @boat.boat_images.not_deleted.each do |boat_img|
      %figure
        = link_to boat_img.file_url, 'data-size' => "#{boat_img.width}x#{boat_img.height}" do
          = image_tag boat_img.file_url, alt: @page_title

  = render 'shared/pswp'

  #main-content
    - if @boat.user == current_user || @boat.offer_available?
      .boat-header
        .container
          - if @boat.user == current_user
            = link_to 'PDF Link', makemodel_boat_pdf_path(@boat, format: :pdf), class: 'btn-flat btn-black'
          - else
            - if @boat.offer_available?
              = link_to 'Request Details', '#', class: 'btn-flat btn-black request-details'
              %h5.inline Click here for full boat specification and to contact seller
    .container
      .row.boat-description
        .boat-specs.col-md-7.col-sm-6.col-xs-12.pull-right
          - boat_specs(@boat).each_slice(2).each do |spec_group|
            .row
              - spec_group.each do |spec|
                .col-md-6.col-sm-12
                  %dl.dl-horizontal
                    %dt= spec[0]
                    %dd{'data-attr-name' => spec[2]}= spec[1]

        .col-md-5.col-sm-6.col-xs-12.color-primary
          %h1 About this #{@boat.manufacturer_model}
          .truncated-description
            != @boat.short_description
    - if @boat.user != current_user
      .boat-footer
        .container.clearfix
          .pull-right
            - if @boat.user != current_user
              = favourite_link_to @boat
              = render 'shared/social_share', boat: @boat
              - if @boat.offer_available?
                = link_to 'Request Details', '#', class: 'btn-flat btn-black request-details'


= render 'shared/enquiry_popup'

:javascript
  var gallery = null;
  var galleryItems = [];

  var showPswpTumbnail = function() {
    $('.pswp').addClass('thumbnail-mode');
    $('.pswp__button--grid-on').show();
    $('.pswp__button--grid-off, .pswp__button--zoom, .pswp__counter').hide();
  };

  var hidePswpTumbnail = function(index) {
    if (index === 0 || (index && !isNaN(parseInt(index)))) {
      gallery.goTo(index); }
    $('.pswp').removeClass('thumbnail-mode');
    $('.pswp__button--grid-on').hide();
    $('.pswp__button--grid-off, .pswp__button--zoom, .pswp__counter').show();
  };

  $(document).ready(function() {
    $('#slider').slick({
      centerMode: true,
      initialSlide: 2,
      focusOnSelect: true,
      slidesToShow: 1,
      variableWidth: true,
      infinite: false
    });

    $('#slider img').one('load', function() {
      $('#slider').removeClass('hide');
    }).each(function() {
      if(this.complete) $(this).load();
    });

    var initPhotoSwipeFromDOM = function(gallerySelector) {
      // parse slide data (url, title, size ...) from DOM elements
      // (children of gallerySelector)
      var parseThumbnailElements = function(el) {
        var thumbElements = el.childNodes,
          numNodes = thumbElements.length,
          items = [],
          figureEl,
          linkEl,
          size,
          item;

        for(var i = 0; i < numNodes; i++) {

          figureEl = thumbElements[i]; // <figure> element

          // include only element nodes
          if(figureEl.nodeType !== 1) {
            continue;
          }

          linkEl = figureEl.children[0]; // <a> element

          size = linkEl.getAttribute('data-size').split('x');

          // create slide object
          item = {
            src: linkEl.getAttribute('href'),
            w: parseInt(size[0], 10),
            h: parseInt(size[1], 10)
          };

          if(figureEl.children.length > 1) {
            // <figcaption> content
            item.title = figureEl.children[1].innerHTML;
          }

          if(linkEl.children.length > 0) {
            // <img> thumbnail element, retrieving thumbnail url
            item.msrc = linkEl.children[0].getAttribute('src');
            // Add to thumbnail list
            $('.pswp__thumbnail-viewer__container').append('<div class="pswp-thumbnail" data-index="' + i + '"><div class="img-wrap-outer"><div class="img-wrap-inner"><img src="' + item.msrc + '"/></div></div></div>');
          }

          item.el = figureEl; // save link to element for getThumbBoundsFn
          items.push(item);
        }

        $('.pswp-thumbnail').click(function () {
          var index = $(this).data('index');
          hidePswpTumbnail(index);
        });

        return items;
      };

      // find nearest parent element
      var closest = function closest(el, fn) {
        return el && ( fn(el) ? el : closest(el.parentNode, fn) );
      };

      // triggers when user clicks on thumbnail
      var onThumbnailsClick = function(e) {
        e = e || window.event;
        e.preventDefault ? e.preventDefault() : e.returnValue = false;

        var eTarget = e.target || e.srcElement;

        // find root element of slide
        var clickedListItem = closest(eTarget, function(el) {
          return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
        });

        if(!clickedListItem) {
          return;
        }

        // find index of clicked item by looping through all child nodes
        // alternatively, you may define index via data- attribute
        var clickedGallery = clickedListItem.parentNode,
          childNodes = clickedListItem.parentNode.childNodes,
          numChildNodes = childNodes.length,
          nodeIndex = 0,
          index;

        for (var i = 0; i < numChildNodes; i++) {
          if(childNodes[i].nodeType !== 1) {
            continue;
          }

          if(childNodes[i] === clickedListItem) {
            index = nodeIndex;
            break;
          }
          nodeIndex++;
        }

        if(index >= 0) {
          // open PhotoSwipe if valid index found
          openPhotoSwipe( index, clickedGallery );
        }
        return false;
      };

      // parse picture index and gallery index from URL (#&pid=1&gid=2)
      var photoswipeParseHash = function() {
        var hash = window.location.hash.substring(1),
        params = {};

        if(hash.length < 5) {
          return params;
        }

        var vars = hash.split('&');
        for (var i = 0; i < vars.length; i++) {
          if(!vars[i]) {
            continue;
          }
          var pair = vars[i].split('=');
          if(pair.length < 2) {
            continue;
          }
          params[pair[0]] = pair[1];
        }

        if(params.gid) {
          params.gid = parseInt(params.gid, 10);
        }

        return params;
      };

      var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
        hidePswpTumbnail();
        var pswpElement = document.querySelectorAll('.pswp')[0],
          options,
          items;

        if (galleryItems.length > 0) {
          items = galleryItems;
        } else {
          items = parseThumbnailElements(galleryElement);
          galleryItems = items;
        }

        // define options (if needed)
        options = {

          // define gallery index (for URL)
          galleryUID: galleryElement.getAttribute('data-pswp-uid'),

          closeOnScroll: false,

          getThumbBoundsFn: function(index) {
            // See Options -> getThumbBoundsFn section of documentation for more info
            var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
              pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
              rect = thumbnail.getBoundingClientRect();

            return {x:rect.left, y:rect.top + pageYScroll, w:rect.width};
          }

        };

        // PhotoSwipe opened from URL
        if(fromURL) {
          if(options.galleryPIDs) {
            // parse real index when custom PIDs are used
            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
            for(var j = 0; j < items.length; j++) {
              if(items[j].pid == index) {
                options.index = j;
                break;
              }
            }
          } else {
            // in URL indexes start from 1
            options.index = parseInt(index, 10) - 1;
          }
        } else {
          options.index = parseInt(index, 10);
        }

        // exit if index not found
        if( isNaN(options.index) ) {
          return;
        }

        if(disableAnimation) {
          options.showAnimationDuration = 0;
        }

        // Pass data to PhotoSwipe and initialize it
        gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options);
        gallery.init();
      };

      // loop through all gallery elements and bind events
      var galleryElements = document.querySelectorAll( gallerySelector );

      for(var i = 0, l = galleryElements.length; i < l; i++) {
        galleryElements[i].setAttribute('data-pswp-uid', i+1);
        galleryElements[i].onclick = onThumbnailsClick;
      }

      // Parse URL and open gallery if it contains #&pid=3&gid=1
      var hashData = photoswipeParseHash();
      if(hashData.pid && hashData.gid) {
        openPhotoSwipe( hashData.pid ,  galleryElements[ hashData.gid - 1 ], true, true );
      }
    };

    // execute above function
    initPhotoSwipeFromDOM('#slider');

    $('.pswp__button--grid-on').bind('click touchstart', hidePswpTumbnail);
    $('.pswp__button--grid-off').bind('click touchstart', showPswpTumbnail);
  });