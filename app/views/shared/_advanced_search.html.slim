#advanced-search-wrapper.navbar-static-top(class="#{'refine-search' if controller_name.in? %w(search manufacturers)}")
  = image_tag 'anchor.png', class: 'anchor-img', alt: ''
  #advanced-search.container
    button.close(aria-label="Close" type="button")
      span(aria-hidden="true")
        small Close
        |  &times;
    button.like-link.reset-adv-search Clear Search
    h2
      - if controller_name == 'search'
        | Refine Search <small>Here you can filter and refine the <b>#{implicit_boats_count @boats.total_count}</b> boats of your search result</small>
      - else
        | Advanced Search

    = form_tag search_path, method: :get, class: 'row' do
      = hidden_field_tag :year_min
      = hidden_field_tag :year_max
      = hidden_field_tag :price_min
      = hidden_field_tag :price_max
      = hidden_field_tag :length_min
      = hidden_field_tag :length_max
      = hidden_field_tag :order, params[:order]

      .col-xs-12
        .row
          .col-sm-6.col-xs-12
            .form-group.row
              .col-xs-4
                = label_tag :boat_type
              .col-xs-8
                = radio_button_tag :boat_type, '', params[:boat_type].blank?, id: 'adv_boat_type_all'
                = label_tag :boat_type_all, 'All', for: 'adv_boat_type_all'
                = radio_button_tag :boat_type, 'power', params[:boat_type] == 'power', id: 'adv_boat_type_power'
                = label_tag :boat_type_power, 'Power', for: 'adv_boat_type_power'
                = radio_button_tag :boat_type, 'sail', params[:boat_type] == 'sail', id: 'adv_boat_type_sail'
                = label_tag :boat_type_sail, 'Sail', for: 'adv_boat_type_sail'
      .col-sm-6.col-xs-12
        .form-group.row
          .col-xs-4
            = label_tag :manufacturers_picker, 'Manufacturers'
          .col-xs-4
            = manufacturers_picker_field(:manufacturers, params[:manufacturers])
          .col-xs-1
            = label_tag :models_picker, 'Models'
          .col-xs-3
            = models_picker_field(:models, params[:models])
        .range-slider-wrapper.row
          .col-xs-5.col-sm-4
            = label_tag :year
          .col-xs-7.col-sm-8
            = slider_tag(:year)
        .range-slider-wrapper.row
          .col-xs-5.col-sm-4
            .rb-control-group
              .rb-control
                = label_tag :price
              .rb-control-group-addon
                = currency_select :currency, current_currency, class: "slider-currency-select #{params[:utf8] ? 'select-clear-dark' : 'select-azure'}"
          .col-xs-7.col-sm-8
            = slider_tag(:price, unit: current_currency.try(:name) || 'GBP')
        .range-slider-wrapper.row
          .col-xs-5.col-sm-4
            .rb-control-group
              .rb-control
                = label_tag :length
              .rb-control-group-addon
                = select_tag :length_unit, length_unit_options, class: "slider-length-select #{params[:utf8] ? 'select-clear-dark' : 'select-azure'}"
          .col-xs-7.col-sm-8
            = slider_tag(:length, unit: current_length_unit)
        .form-group.row
          .col-xs-4
            = label_tag :tax_status, nil, class: 'without-top-pad'
          .col-xs-8
            = check_box_tag 'tax_status[paid]', true, (params[:tax_status] || {})['paid'], class: 'inverse'
            = label_tag :tax_status_paid, 'Paid', class: 'tax-paid' do
              | Paid
              i
            = check_box_tag 'tax_status[unpaid]', true, (params[:tax_status] || {})['unpaid'], class: 'inverse'
            = label_tag :tax_status_unpaid, 'Unpaid', class: 'tax-not-paid' do
              | Unpaid
              i
      .col-sm-6.col-xs-12
        .form-group.row
          .col-xs-4
            = label_tag :keywords, 'Keywords'
          .col-xs-8
            = text_field_tag :q, params[:q], class: 'form-control', placeholder: 'e.g. 4 berths'
        .form-group.row
          .col-xs-4
            = label_tag :countries_picker, 'Countries'
          .col-xs-8
            - general_options = general_facets[:countries_data].map { |id, name, count| [count ? "#{name} (#{count})" : name, id] }
            - found_countries = (@search_facets[:countries_data].to_json if @search_facets)
            - selected_ids = ([*(params[:countries] || [])].to_json if params[:countries].present?)
            = select_tag 'countries[]', options_for_select(general_options), id: 'countries_picker', \
                    class: 'select-black multiple-country-select select-state-if-us', multiple: 'multiple', \
                    data: {'found-countries' => found_countries, 'selected-ids' => selected_ids}, \
                    placeholder: 'eg. United Kingdom'
        .form-group.row(style="#{('display: none' if params[:state].blank?)}")
          .col-xs-4
            = label_tag :state_picker, 'State'
          .col-xs-8
            = select_tag :state, \
                    options_for_select(Rightboat::USStates.states_map.map { |k, v| [v, k] }, params[:state]), \
                    id: 'state_picker', class: 'select-black select-general', \
                    prompt: 'Please Select...', placeholder: 'eg. Florida'
        .form-group.row
          .col-xs-4
            = label_tag :ref_no, 'Ref No.'
          .col-xs-8
            = text_field_tag :ref_no, '', placeholder: 'e.g. RB48573', class: 'form-control'
        .form-group.row
          .col-xs-4
            = label_tag :new_used, 'New / Used', class: 'without-top-pad'
          .col-xs-8
            = check_box_tag 'new_used[new]', true, (params[:new_used] || {})['new'], class: 'inverse'
            = label_tag :new_used_new, 'New'
            = check_box_tag 'new_used[used]', true, (params[:new_used] || {})['used'], class: 'inverse'
            = label_tag :new_used_used, 'Used'
        .form-group.row
          .col-xs-4
            = render partial: 'shared/save_search_btn', locals: {nav_link: false, btn_flat: true}
          .col-xs-8
            button.btn-flat(type="submit") Search
      .result-info.col-sm-12.col-md-12.text-center
        - if @boats
          | Results: #{@boats.total_count >= 10000 ? '10,000 plus' : @boats.total_count} boats fit your criteria

- content_for :body_scripts do
  javascript:
    window.currencyRates = #{raw Currency.pluck(:name, :rate).to_h.to_json};
