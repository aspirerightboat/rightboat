svg#pswp-icons.icons
  symbol#icon_grid_off(viewbox="0 0 46 36")
    title icon_grid_off
    g#icon_grid_off-icons
      g
        g
          path(d="M21,16H0V0h21V16z M2,14h17V2H2V14z")
        g
          path(d="M46,16H25V0h21V16z M27,14h17V2H27V14z")
        g
          path(d="M21,36H0V20h21V36z M2,34h17V22H2V34z")
        g
          path(d="M46,36H25V20h21V36z M27,34h17V22H27V34z")
  symbol#icon_grid_on(viewbox="0 0 46 36")
    title icon_grid_on
    g#icon_grid_on-bg
      g
        rect(height="16" width="21")
        rect(height="16" width="21" x="25")
        rect(height="16" width="21" y="20")
        rect(height="16" width="21" x="25" y="20")

.pswp(aria-hidden="true" role="dialog" tabindex="-1")
  .pswp__bg
  .pswp__scroll-wrap
    .pswp__container
      .pswp__item
      .pswp__item
      .pswp__item
    .pswp__ui.pswp__ui--hidden
      .pswp__top-bar
        .pswp__counter
        button.pswp__button.pswp__button--close(title="Close (Esc)")
        /!%button.pswp__button.pswp__button--share{title: "Share"}
        button.pswp__button.pswp__button--grid-off(style="display: none;" title="View Thumbnails")
          svg.icon.pswp__button--grid-off__icon(viewbox="0 0 46 36")
            use*{'xlink:href' => '#icon_grid_off', 'xmlns:xlink' => 'http://www.w3.org/1999/xlink'}
        button.pswp__button.pswp__button--grid-on(title="Hide Thumbnails")
          svg.icon.pswp__button--grid-on__icon(viewbox="0 0 46 36")
            use*{'xlink:href' => '#icon_grid_on', 'xmlns:xlink' => 'http://www.w3.org/1999/xlink'}
        button.pswp__button.pswp__button--fs(title="Toggle fullscreen")
        button.pswp__button.pswp__button--zoom(title="Zoom in/out")
        .pswp__preloader
          .pswp__preloader__icn
            .pswp__preloader__cut
              .pswp__preloader__donut
      /!.pswp__share-modal.pswp__share-modal--hidden.pswp__single-tap
      /!  .pswp__share-tooltip
      button.pswp__button.pswp__button--arrow--left(title="Previous (arrow left)")
      button.pswp__button.pswp__button--arrow--right(title="Next (arrow right)")
      .pswp__caption
        .pswp__caption__center
  .pswp__thumbnail-wrap
    .pswp__thumbnail-viewer__container

javascript:
  var gallery = null;
  var galleryItems = [];

  var showPswpTumbnail = function() {
    $('.pswp').addClass('thumbnail-mode');
    $('.pswp__button--grid-on').show();
    $('.pswp__button--grid-off, .pswp__button--zoom, .pswp__counter').hide();
  };

  var hidePswpTumbnail = function(index) {
    if (index === 0 || (index && !isNaN(parseInt(index)))) {
      gallery.goTo(index);
    }
    $('.pswp').removeClass('thumbnail-mode');
    $('.pswp__button--grid-on').hide();
    $('.pswp__button--grid-off, .pswp__button--zoom, .pswp__counter').show();
  };

  $(document).ready(function() {
    $('#slider').slick({
      centerMode: true,
      initialSlide: 2,
      focusOnSelect: true,
      slidesToShow: 1,
      variableWidth: true,
      infinite: false
    });

    $('#slider img').one('load', function() {
      $('#slider').removeClass('hide');
    }).each(function() {
      if (this.complete) $(this).load();
    });

    var initPhotoSwipeFromDOM = function(gallerySelector) {
      // parse slide data (url, title, size ...) from DOM elements
      // (children of gallerySelector)
      var parseThumbnailElements = function(el) {
        var thumbElements = el.childNodes,
                numNodes = thumbElements.length,
                items = [],
                figureEl,
                linkEl,
                size,
                item;

        for (var i = 0; i < numNodes; i++) {

          figureEl = thumbElements[i]; // <figure> element

          // include only element nodes
          if (figureEl.nodeType !== 1) {
            continue;
          }

          linkEl = figureEl.children[0]; // <a> element

          size = linkEl.getAttribute('data-size').split('x');

          // create slide object
          item = {
            src: linkEl.getAttribute('href'),
            w: parseInt(size[0], 10),
            h: parseInt(size[1], 10)
          };

          if (figureEl.children.length > 1) {
            // <figcaption> content
            item.title = figureEl.children[1].innerHTML;
          }

          if (linkEl.children.length > 0) {
            // <img> thumbnail element, retrieving thumbnail url
            item.msrc = linkEl.children[0].getAttribute('src');
            // Add to thumbnail list
            $('.pswp__thumbnail-viewer__container').append('<div class="pswp-thumbnail" data-index="' + i + '"><div class="img-wrap-outer"><div class="img-wrap-inner"><img src="' + item.msrc + '"/></div></div></div>');
          }

          item.el = figureEl; // save link to element for getThumbBoundsFn
          items.push(item);
        }

        $('.pswp-thumbnail').click(function() {
          var index = $(this).data('index');
          hidePswpTumbnail(index);
        });

        return items;
      };

      // find nearest parent element
      var closest = function closest(el, fn) {
        return el && ( fn(el) ? el : closest(el.parentNode, fn) );
      };

      // triggers when user clicks on thumbnail
      var onThumbnailsClick = function(e) {
        e = e || window.event;
        e.preventDefault ? e.preventDefault() : e.returnValue = false;

        var eTarget = e.target || e.srcElement;

        // find root element of slide
        var clickedListItem = closest(eTarget, function(el) {
          return (el.tagName && el.tagName.toUpperCase() === 'FIGURE');
        });

        if (!clickedListItem) {
          return;
        }

        // find index of clicked item by looping through all child nodes
        // alternatively, you may define index via data- attribute
        var clickedGallery = clickedListItem.parentNode,
                childNodes = clickedListItem.parentNode.childNodes,
                numChildNodes = childNodes.length,
                nodeIndex = 0,
                index;

        for (var i = 0; i < numChildNodes; i++) {
          if (childNodes[i].nodeType !== 1) {
            continue;
          }

          if (childNodes[i] === clickedListItem) {
            index = nodeIndex;
            break;
          }
          nodeIndex++;
        }

        if (index >= 0) {
          // open PhotoSwipe if valid index found
          openPhotoSwipe(index, clickedGallery);
        }
        return false;
      };

      // parse picture index and gallery index from URL (#&pid=1&gid=2)
      var photoswipeParseHash = function() {
        var hash = window.location.hash.substring(1),
                params = {};

        if (hash.length < 5) {
          return params;
        }

        var vars = hash.split('&');
        for (var i = 0; i < vars.length; i++) {
          if (!vars[i]) {
            continue;
          }
          var pair = vars[i].split('=');
          if (pair.length < 2) {
            continue;
          }
          params[pair[0]] = pair[1];
        }

        if (params.gid) {
          params.gid = parseInt(params.gid, 10);
        }

        return params;
      };

      var openPhotoSwipe = function(index, galleryElement, disableAnimation, fromURL) {
        hidePswpTumbnail();
        var pswpElement = document.querySelectorAll('.pswp')[0],
                options,
                items;

        if (galleryItems.length > 0) {
          items = galleryItems;
        } else {
          items = parseThumbnailElements(galleryElement);
          galleryItems = items;
        }

        // define options (if needed)
        options = {

          // define gallery index (for URL)
          galleryUID: galleryElement.getAttribute('data-pswp-uid'),

          closeOnScroll: false,

          getThumbBoundsFn: function(index) {
            // See Options -> getThumbBoundsFn section of documentation for more info
            var thumbnail = items[index].el.getElementsByTagName('img')[0], // find thumbnail
                    pageYScroll = window.pageYOffset || document.documentElement.scrollTop,
                    rect = thumbnail.getBoundingClientRect();

            return {x: rect.left, y: rect.top + pageYScroll, w: rect.width};
          }

        };

        // PhotoSwipe opened from URL
        if (fromURL) {
          if (options.galleryPIDs) {
            // parse real index when custom PIDs are used
            // http://photoswipe.com/documentation/faq.html#custom-pid-in-url
            for (var j = 0; j < items.length; j++) {
              if (items[j].pid == index) {
                options.index = j;
                break;
              }
            }
          } else {
            // in URL indexes start from 1
            options.index = parseInt(index, 10) - 1;
          }
        } else {
          options.index = parseInt(index, 10);
        }

        // exit if index not found
        if (isNaN(options.index)) {
          return;
        }

        if (disableAnimation) {
          options.showAnimationDuration = 0;
        }

        // Pass data to PhotoSwipe and initialize it
        gallery = new PhotoSwipe(pswpElement, PhotoSwipeUI_Default, items, options);
        gallery.init();
      };

      // loop through all gallery elements and bind events
      var galleryElements = document.querySelectorAll(gallerySelector);

      for (var i = 0, l = galleryElements.length; i < l; i++) {
        galleryElements[i].setAttribute('data-pswp-uid', i + 1);
        galleryElements[i].onclick = onThumbnailsClick;
      }

      // Parse URL and open gallery if it contains #&pid=3&gid=1
      var hashData = photoswipeParseHash();
      if (hashData.pid && hashData.gid) {
        openPhotoSwipe(hashData.pid, galleryElements[hashData.gid - 1], true, true);
      }
    };

    // execute above function
    initPhotoSwipeFromDOM('#slider');

    $('.pswp__button--grid-on').bind('click touchstart', hidePswpTumbnail);
    $('.pswp__button--grid-off').bind('click touchstart', showPswpTumbnail);
  });
